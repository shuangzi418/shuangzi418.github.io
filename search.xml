<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中国科学院某研究所漏洞</title>
      <link href="/2025/04/16/%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%AD%A6%E9%99%A2%E6%9F%90%E7%A0%94%E7%A9%B6%E6%89%80%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/16/%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%AD%A6%E9%99%A2%E6%9F%90%E7%A0%94%E7%A9%B6%E6%89%80%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="中国科学院某研究所漏洞"><a href="#中国科学院某研究所漏洞" class="headerlink" title="中国科学院某研究所漏洞"></a>中国科学院某研究所漏洞</h1><p>一，首页先看：</p><p>在收集信息的时候用鹰图平台语法搜索：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200059759.jpg"></p><p>（由于是再次演示，直接筛选出机构点入）每个都点一遍，发现有一个有点隐藏的管理系统：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200117372.png"></p><p>看见左下某科考服务系统，点入登录：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200124005.png"></p><p>用常见弱密码（admin 123456），尝试之后提示密码错误，可能账号是正确的，但密码是错误的，所以直接在忘记密码中直接重置：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418195908353.png"></p><p>用burpsuite打开对发送过后的响应包进行检查，发现密码就在返回包中：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418195910147.png"></p><p>直接重置密码为（admin qwer1234）直接登录到后台：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418195911791.png"></p><p>直接得到管理，直接查看管理的个人信息：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200145514.png"></p><p>拿到管理员的个人信息，当然还可以拿到的其他的人员的个人信息：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200211243.png"></p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418195920118.png"></p><p>资产查出来是属于中科院的某所：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418200219129.png"></p><p>发现算是一个不错的目标，这下挖到了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XYCTFWP</title>
      <link href="/2025/04/04/XYCTF/"/>
      <url>/2025/04/04/XYCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><p>1.签个到吧</p><p>首先会看到题目：</p><p>最小的，具有图灵完备性的语言是？</p><p>回答当然是：Brainfuck</p><p>拿到：</p><pre><code class="highlight plaintext">&gt;+++++++++++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;++++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;++++++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;++&gt;-+-+-+-]&lt;[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]&gt;+++++++[&lt;+++++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++[&lt;+++&gt;-+-+-+-]&lt;[-]&gt;+++++++++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;[-]</code></pre><p>分析发现：</p><p>这段Brainfuck代码通过多个循环结构操作内存单元，但最终所有涉及的位置均被清零，未执行任何输出指令（如<code>.</code>），因此运行结果为空。</p><p>通过修复得到：</p><pre><code class="highlight plaintext">&gt;+++++++++++++++++[&lt;++++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;.[-]&gt;++++++++++++[&lt;+++++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++[&lt;++++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;++++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++++[&lt;+++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;.[-]&gt;++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;+&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++[&lt;+++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++[&lt;++++++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++[&lt;++&gt;-+-+-+-]&lt;.[-]&gt;++++++++[&lt;++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++[&lt;+++++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++++++[&lt;++++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++[&lt;+++&gt;-+-+-+-]&lt;.[-]&gt;+++++++++++++++++++++++++[&lt;+++++&gt;-+-+-+-]&lt;.[-]</code></pre><p>在[Brainfuck&#x2F;Ook! Obfuscation&#x2F;Encoding <a href="https://www.splitbrain.org/services/ook">splitbrain.org]</a>运行可得：</p><pre><code class="highlight plaintext">flag&#123;W3lC0me_t0_XYCTF_2025_Enj07_1t!&#125;</code></pre><p>2.曼波曼波曼波</p><p>拿到附件，发现一个二维码和一大串字符窜的文档，二维码里的是一个假的flag,不用耗费精力：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212201684.png"></p><p>很明显的是一个倒置的base64编码的字符串，倒置转化为图片得到：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212209898.jpg"></p><p>用foremost提取可得：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212217238.png"></p><p>很明显有压缩包，解压压缩得到：</p><p><img src="/./XYCTF.assets/Snipaste_2025-04-05_20-37-56.png"></p><p>好看讷,和善意的提醒：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212222514.png"></p><p>还有一个有密码的压缩包，首次使用：XYCTF2025直接解压缩发现里面又有一张一样的图片，让我想到了盲水印，但是双图片组合，使用工具可得：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212228663.png"></p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212234858.png"></p><p>最后得flag:</p><pre><code class="highlight plaintext">XYCTF&#123;easy_yin_xie_dfbfuj877&#125;</code></pre><p>3.XGCTF</p><p>根据题目描述找到博客：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212243404.png"></p><p>找了一会发现没有，直接源码启动：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212249615.png"></p><p>直接查找flag,发现一段base64编码的字符串，解码得：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212256796.png"></p><p>得到flag:</p><pre><code class="highlight plaintext">flag&#123;1t_I3_t3E_s@Me_ChAl1eNge_aT_a1L_P1e@se_fOrg1ve_Me&#125;</code></pre><p>4.会飞的雷克萨斯</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212302209.jpeg"></p><p>直接就是一张图，直接地图打开：</p><p><img src="https://raw.githubusercontent.com/shuangzi418/cloud-img/main/20250418212312601.png"></p><p>直接得到：</p><pre><code class="highlight plaintext">flag&#123;四川省内江市资中县春岚北路中铁城市中心内&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的文件头</title>
      <link href="/2025/03/27/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
      <url>/2025/03/27/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p>7Z 文件：<br>文件头：37 7A BC AF 27 1C<br>文件尾：(无)</p><p>APK 文件：<br>文件头：50 4B 03 04 14 00 08 00<br>文件尾：50 4B 05 06 00 00</p><p>AVI 文件：<br>文件头：52 49 46 46 xx xx xx xx 41 56 49 20<br>文件尾：00 00 00 00</p><p>BAT 文件：<br>文件头：3C 25 40 20 25 5F 46 49 4C 45 5F 25 20 3E<br>文件尾：(无)</p><p>BMP 文件：<br>文件头：42 4D<br>文件尾：（无）</p><p>CSV 文件：<br>文件头：（无）<br>文件尾：（无）</p><p>DLL 文件：<br>文件头：4D 5A<br>文件尾：(无)</p><p>DOC 文件：<br>文件头：D0 CF 11 E0 A1 B1 1A E1<br>文件尾：（无）</p><p>DOCX 文件：<br>文件头：50 4B 03 04 14 00 06 00<br>文件尾：50 4B 05 06 00 00</p><p>EPS 文件：<br>文件头：25 21 50 53 2D 41 64 6F 62 65<br>文件尾：(无)</p><p>EXE 文件：<br>文件头：4D 5A<br>文件尾：(无)</p><p>FLAC 文件：<br>文件头：66 4C 61 43<br>文件尾：(无)</p><p>GIF 文件：<br>文件头：47 49 46 38 39 61<br>文件尾：3B</p><p>GZ 文件：<br>文件头：1F 8B 08<br>文件尾：(无)</p><p>HTML 文件：<br>文件头：3C 21 44 4F 43 54 59 50 45 20 48 54 4D 4C 20 50<br>文件尾：3C 2F 48 54 4D 4C 3E</p><p>ICO 文件：<br>文件头：00 00 01 00<br>文件尾：（无）</p><p>INI 文件：<br>文件头：3B<br>文件尾：(无)</p><p>ISO 文件：<br>文件头：43 44 30 30 31<br>文件尾：(无)</p><p>Java 类文件：<br>文件头：CA FE BA BE<br>文件尾：(无)</p><p>JAR 文件：<br>文件头：50 4B 03 04 14 00 08 00<br>文件尾：50 4B 05 06 00 00</p><p>JPEG 文件：<br>文件头：FF D8 FF E0<br>文件尾：FF D9</p><p>JPG 文件：<br>文件头：FF D8 FF E0<br>文件尾：FF D9</p><p>JSON 文件：<br>文件头：7B 22 74 79 70 65 22 3A 22<br>文件尾：7D</p><p>MKV 文件：<br>文件头：1A 45 DF A3<br>文件尾：(无)</p><p>MOV 文件：<br>文件头：00 00 00 14 66 74 79 70 71 74 20<br>文件尾：(无)</p><p>MP3 文件：<br>文件头：49 44 33<br>文件尾：FF FB</p><p>MP4 文件：<br>文件头：00 00 00 14 66 74 79 70 69 73 6F 6D<br>文件尾：(无)</p><p>ODT 文件：<br>文件头：50 4B 03 04 14 00 08 08<br>文件尾：50 4B 05 06 00 00</p><p>OTF 文件：<br>文件头：4F 54 54 4F<br>文件尾：(无)</p><p>PDF 文件：<br>文件头：25 50 44 46 2D 31 2E<br>文件尾：25 25 45 4F 46</p><p>PNG 文件：<br>文件头：89 50 4E 47 0D 0A 1A 0A<br>文件尾：49 45 4E 44 AE 42 60 82</p><p>PPT 文件：<br>文件头：D0 CF 11 E0 A1 B1 1A E1<br>文件尾：（无）</p><p>PPTX 文件：<br>文件头：50 4B 03 04 14 00 06 00<br>文件尾：50 4B 05 06 00 00</p><p>PSD 文件：<br>文件头：38 42 50 53<br>文件尾：(无)</p><p>RAR 文件：<br>文件头：52 61 72 21 1A 07 00<br>文件尾：(无)</p><p>RTF 文件：<br>文件头：7B 5C 72 74 66 31<br>文件尾：7D</p><p>SQL 文件：<br>文件头：3B 43 3B 20<br>文件尾：3B</p><p>SVG 文件：<br>文件头：3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E<br>文件尾：3C 2F 73 76 67 3E</p><p>TAR 文件：<br>文件头：75 73 74 61 72 00 30 30<br>文件尾：（无）</p><p>TIFF 文件：<br>文件头：49 49 2A 00<br>文件尾：(无)</p><p>TXT 文件：<br>文件头：（无）<br>文件尾：（无）</p><p>WAV 文件：<br>文件头：52 49 46 46 xx xx xx xx 57 41 56 45 66 6D 74 20<br>文件尾：64 61 74 61 xx xx xx xx</p><p>WebM 文件：<br>文件头：1A 45 DF A3<br>文件尾：(无)</p><p>Windows 文件夹（目录）：<br>文件头：4B 44 57 4D<br>文件尾：(无)</p><p>WMV 文件：<br>文件头：30 26 B2 75 8E 66 CF 11 A6 D9 00 AA 00 62 CE 6C<br>文件尾：(无)</p><p>WordPerfect 文件：<br>文件头：FF 57 50 43<br>文件尾：（无）</p><p>XLS 文件：<br>文件头：D0 CF 11 E0 A1 B1 1A E1<br>文件尾：（无）</p><p>XLSX 文件：<br>文件头：50 4B 03 04 14 00 06 00<br>文件尾：50 4B 05 06 00 00</p><p>XML 文件：<br>文件头：3C 3F 78 6D 6C 20 76 65 72 73 69 6F 6E<br>文件尾：3C 2F 72 6F 6F 74 3E</p><p>ZIP 文件：<br>文件头：50 4B 03 04<br>文件尾：50 4B 05 06</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FHACKER CTF WP</title>
      <link href="/2025/03/27/FHACKER-%20CTF-%20WP/"/>
      <url>/2025/03/27/FHACKER-%20CTF-%20WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>1.ez_jpg</p><p>首先会拿到一flag.txt</p><p>打开会看见base64的编码的数据：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/image-20250327193330904.png" alt="image-20250327193330904"></p><p>将其用工具解码：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/image-20250327193804810.png" alt="image-20250327193804810"></p><p>发现最后的文件末尾好像是jpg的头文件（FF D8 FF E0）所以将字符的顺序进行一个倒置，最后将字符串导入winhex,储存为jpg类型：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/1.jpg" alt="1"></p><p>发现图片有异常，看看高宽：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/image-20250327201106099.png" alt="image-20250327201106099"></p><p>有问题，将宽修改为680也就修改图中标橙色的部分，保存得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/2.jpg" alt="2"></p><p>可得flag:SYC{Steg_4nd_Zip_1s_G00d!}</p><p>2.舔狗的觉醒</p><p>首先下载下来是一个压缩包：</p><p>我们用ARCHPR密码爆破从1位到8位：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_19-31-03.png"></p><p>解压可得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_20-48-48.png"></p><p>发现有头文件但是被倒置了，可以用程序倒置：</p><pre><code class="highlight python"><span class="comment"># 读取文件内容</span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;byte-revenge.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:    data = file.read().split()  <span class="comment"># 按空格分割每个字节</span><span class="comment"># 反转每个字节</span>swapped_data = [byte[::-<span class="number">1</span>] <span class="keyword">for</span> byte <span class="keyword">in</span> data]<span class="comment"># 将处理后的内容写回文件</span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:    file.write(<span class="string">&#x27; &#x27;</span>.join(swapped_data))</code></pre><p>转化为文件：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_20-48-59.png"></p><p>将文件转化为winhex保存为pdf格式得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_20-52-40.png"></p><p>将图片移开得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_20-43-23.png"></p><p>得到Flag:SYC{Y0u_arE_y0uR_0wn_hero}</p><p>3.cimbar</p><p>附件下载下来得到：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/theTruth0fCimbar.png"></p><p>用cimbar密码对照表：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-01-18.png"></p><p>得到二进制数据：</p><pre><code class="highlight plaintext">01010011010110010100001101111011010000010110111000110000011101000110100000110011011100100101111101000001011011010100000001111010001100010110111000111001010111110101000101010010010111110100001101101111001101000110010101111101</code></pre><p>转化为字符串：</p><pre><code class="highlight plaintext">SYC&#123;An0th3r_Am@z1n9_QR_Co4e&#125;</code></pre><p>4.Truth of Word</p><p>附件下载下来是一个word文档：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-06-36.png"><br>$$</p><p>$$<br>会发现在图片得下方有一个可以被鼠标圈起来的的文字，将其改变颜色可得flag01:</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-06-43.png"></p><p>在打开word文档时会提醒有宏，检查运行的宏得到flag02:</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-08-11.png"></p><p>由于word文档本质是压缩包，将后缀改为.zip解压可得到一些文件，找到图片所在得文件夹：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-23-35.png"></p><p>找到flag03</p><p>最后得到flag:</p><pre><code class="highlight plaintext">SYC&#123;W0rd_H@5@_Ama1n9_StrUCtu3e!&#125;</code></pre><p>5.乌龟</p><p>下载附件，解压发现是一段音频，用RX-SSTV可以得到一个图片：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/%E4%B9%8C%E9%BE%9F%E5%AF%86%E7%A0%81.png"></p><p>这判断为音频得密码，把音频丢进Deepsound可得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-39-43.png"></p><p>用在线logo编码编译运行：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-03-31_21-38-27.png"></p><p>6.雪</p><p>附件下载下来发现是一个被加密的压缩包，先用010 Editor打开发现：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_13-36-01.png"></p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_13-37-16.png"></p><p>发现数据末尾有一窜字符，发现为base64编码，解码得：W3LC0M4，应该为密码，尝试一下，的确是，发现了文本文件，打开：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_13-44-38.png"></p><p>还有一张图片，选择用工具处理图片隐写：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_13-55-57.png"></p><p>得到snow得密码，用程序解密：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_14-05-33.png"></p><pre><code class="highlight plaintext">得flag:SYC&#123;Ma1by_y0u_w1ll_l1k3_sn0w&#125;</code></pre><p>7.ez_pcap_1</p><p>直接放一把梭里：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_14-30-42.png"></p><pre><code class="highlight plaintext">SYC&#123;smb_pcapng_1s_g00d!&#125;</code></pre><p>8.Secret of Starven</p><p>根据分析可得，用SMB导出：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_14-38-11.png"></p><p>- </p><p>得到一个压缩包和网照，打开压缩包发现被加密了，用010 Editor打开发现文件没有异常，所以尝试密码爆破，得知kali里面有一个数量级较大的字典——rockyou.txt，改为合适得格式后导入字典爆破软件可得：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_14-46-50.png"></p><p>解压得到flag.txt进而得到:</p><pre><code class="highlight plaintext">flag:SYC&#123;D0n7_spre0d_St@rven&#x27;s_s3crEt&#125;</code></pre><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><p>1.100%的⚪</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_15-05-01.png"></p><p>首先打开网址发现需要画一个圆，我们可以直接画，但也可以用更加直接得手段来得到我们想要的，比如直接查看源码搜索，先搜flag，但没那么简单，直接多写几个fff,搜到了：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_15-05-21.png"></p><p>是base64加密，直接解密可以得到flag:</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_15-05-46.png"></p><p>可以得到flag:</p><pre><code class="highlight plaintext">SYC&#123;5UcH_@_Wo0d3rfUl_CiRc1e&#125;</code></pre><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><p>1,RSA</p><p>基础，直接写解码程序：</p><pre><code class="highlight python"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytesn = <span class="number">33108009203593648507706487693709965711774665216872550007309537128959455938833</span>p = <span class="number">192173332221883349384646293941837353967</span>q = <span class="number">172282016556631997385463935089230918399</span>e = <span class="number">65537</span>c = <span class="number">5366332878961364744687912786162467698377615956518615197391990327680664213847</span>phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)m = <span class="built_in">pow</span>(c, d, n)<span class="built_in">print</span>(long_to_bytes(m).decode())</code></pre><p>运行程序得到flag:</p><pre><code class="highlight plaintext">SYC&#123;RSA_is_easy&#125;</code></pre><p>2.共模攻击</p><p>直接上程序：</p><pre><code class="highlight python"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytesn = <span class="number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span>e1, e2 = <span class="number">911</span>, <span class="number">967</span>c1 = <span class="number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span>c2 = <span class="number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span><span class="comment"># 计算贝祖系数</span><span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):    <span class="keyword">if</span> b == <span class="number">0</span>:        <span class="keyword">return</span> a, <span class="number">1</span>, <span class="number">0</span>    <span class="keyword">else</span>:        g, x, y = extended_gcd(b, a % b)        <span class="keyword">return</span> g, y, x - (a // b) * ygcd, a, b = extended_gcd(e1, e2)<span class="comment"># 处理负数指数</span><span class="keyword">if</span> a &lt; <span class="number">0</span>:    c1_inv = <span class="built_in">pow</span>(c1, -<span class="number">1</span>, n)    part1 = <span class="built_in">pow</span>(c1_inv, -a, n)<span class="keyword">else</span>:    part1 = <span class="built_in">pow</span>(c1, a, n)<span class="keyword">if</span> b &lt; <span class="number">0</span>:    c2_inv = <span class="built_in">pow</span>(c2, -<span class="number">1</span>, n)    part2 = <span class="built_in">pow</span>(c2_inv, -b, n)<span class="keyword">else</span>:    part2 = <span class="built_in">pow</span>(c2, b, n)m = (part1 * part2) % n<span class="built_in">print</span>(long_to_bytes(m).decode())</code></pre><p>运行就可以得到答案flag:</p><pre><code class="highlight plaintext">SYC&#123;U_can_really_attack&#125;</code></pre><p>3.XOR</p><p>直接上代码：</p><pre><code class="highlight python"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes<span class="keyword">from</span> pwn <span class="keyword">import</span> xor<span class="comment"># 题目给定数据</span>e2 = <span class="number">10706859949950921239354880312196039515724907</span>f1 = <span class="number">4585958212176920650644941909171976689111990</span>f2 = <span class="number">3062959364761961602614252587049328627114908</span><span class="comment"># 逆向计算原始加密数据</span>enc = e2 ^ f1 ^ f2enc_bytes = long_to_bytes(enc)<span class="comment"># 尝试不同前导零补齐方式</span>found = <span class="literal">False</span><span class="keyword">for</span> pad <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):    padded = <span class="string">b&#x27;\x00&#x27;</span> * pad + enc_bytes        <span class="comment"># 检查长度是否足够提取密钥</span>    <span class="keyword">if</span> <span class="built_in">len</span>(padded) &lt; <span class="number">4</span>:        <span class="keyword">continue</span>        <span class="comment"># 通过已知flag头恢复密钥</span>    <span class="keyword">try</span>:        key = xor(padded[:<span class="number">4</span>], <span class="string">b&#x27;SYC&#123;&#x27;</span>)    <span class="keyword">except</span>:        <span class="keyword">continue</span>        <span class="comment"># 循环异或解密完整内容</span>    <span class="keyword">try</span>:        flag = xor(padded, key)        <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;SYC&#123;&#x27;</span>):            <span class="built_in">print</span>(<span class="string">f&quot;[+] Flag found with <span class="subst">&#123;pad&#125;</span> padding: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)            found = <span class="literal">True</span>            <span class="keyword">break</span>    <span class="keyword">except</span>:        <span class="keyword">continue</span><span class="keyword">if</span> <span class="keyword">not</span> found:    <span class="built_in">print</span>(<span class="string">&quot;[-] Failed to recover flag with tested padding&quot;</span>)</code></pre><p>运行可得flag：</p><pre><code class="highlight plaintext">SYC&#123;a_part_0f_X0R&#125;</code></pre><p>4.ncoCRT</p><p>没什么好说的直接上代码：</p><pre><code class="highlight python"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes<span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):    <span class="keyword">if</span> b == <span class="number">0</span>:        <span class="keyword">return</span> (a, <span class="number">1</span>, <span class="number">0</span>)    <span class="keyword">else</span>:        g, x, y = extended_gcd(b, a % b)        <span class="keyword">return</span> (g, y, x - (a // b) * y)<span class="keyword">def</span> <span class="title function_">crt_merge</span>(<span class="params">a1, m1, a2, m2</span>):    g, x, y = extended_gcd(m1, m2)    <span class="keyword">if</span> (a2 - a1) % g != <span class="number">0</span>:        <span class="keyword">return</span> <span class="literal">None</span>    lcm = m1 // g * m2    tmp = (a1 + (x * (a2 - a1) // g) % (m2 // g) * m1) % lcm    <span class="keyword">return</span> (tmp, lcm)p = [    <span class="number">1921232050179818686537976490035</span>,    <span class="number">2050175089402111328155892746480</span>,    <span class="number">1960810970476421389691930930824</span>,    <span class="number">1797713136323968089432024221276</span>,    <span class="number">2326915607951286191807212748022</span>]c = [    <span class="number">1259284928311091851012441581576</span>,    <span class="number">1501691203352712190922548476321</span>,    <span class="number">1660842626322200346728249202857</span>,    <span class="number">657314037433265072289232145909</span>,    <span class="number">2056630082529583499248887436721</span>]current_a, current_m = c[<span class="number">0</span>], p[<span class="number">0</span>]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):    result = crt_merge(current_a, current_m, c[i], p[i])    <span class="keyword">if</span> <span class="keyword">not</span> result:        <span class="built_in">print</span>(<span class="string">f&quot;Failed to merge equation <span class="subst">&#123;i&#125;</span>&quot;</span>)        exit()    current_a, current_m = result<span class="comment"># 转换为字节并去除填充</span>m_bytes = long_to_bytes(current_a).rstrip(<span class="string">b&#x27;\x01&#x27;</span>)<span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, m_bytes.decode())</code></pre><p>运行程序即可得到flag:</p><pre><code class="highlight plaintext">SYC&#123;wha+s_wr0n9!_CRT_bu+_n0+_&lt;0mpr1me!&#125;</code></pre><p>5.凯撒加密</p><p>先拿到加密的文本：</p><pre><code class="highlight plaintext">YEI&#123;CKRIUSK_ZU_2024_MKKQ_INGRRKTMK&#125;</code></pre><p>已知凯撒加密的是具有偏移量的，我们用SYC来确定偏移量，偏移量为20；</p><ul><li><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_15-46-27-1743510051466-2.png"></p></li><li><p>得到flag：</p></li><li><pre><code>SYC&#123;WELCOME_TO_2024_GEEK_CHALLENGE&#125;<pre><code class="highlight plaintext">- 6.ezRSA直接上代码，需要在sagemath上跑：```pythonfrom sage.all import *# 校验值n = 98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511c = 9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965h = 111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865bits = 150# 计算 h_plus 和 Mh_plus = h + 2023M = h_plus // 2024# 定义多项式环P = PolynomialRing(Zmod(n), &#x27;x&#x27;)x = P.gen()# 构造多项式 (M + x)^3 - cf = (M + x)^3 - c# 尝试小根try:    x0 = f.small_roots(X=2^bits, beta=0.5)    if x0:        x = x0[0]        m = M + x        # 验证解        if (M + x)^3 == c:            # 转换为字节            hex_str = hex(m)[2:]            if len(hex_str) % 2 != 0:                hex_str = &#x27;0&#x27; + hex_str            flag = bytes.fromhex(hex_str)            print(&quot;Flag:&quot;, flag.decode())        else:            print(&quot;Solution is invalid&quot;)    else:        print(&quot;No solution found&quot;)except Exception as e:    print(&quot;Error:&quot;, e)</code></pre></code></pre></li></ul><p>跑出：</p><p><img src="/./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_16-08-11.png"></p><p>可以得到flag:</p><pre><code class="highlight plaintext">SYC&#123;crypto_is_very_interesting_why_dont_you_join_us&#125;</code></pre><p>7.dp</p><p>直接上代码：</p><pre><code class="highlight plaintext">from Crypto.Util.number import inverse, long_to_bytesimport mathc = 127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060n = 157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871e = 65537dp = 2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769# 选择a=2计算可能的pa = 2exponent = e * dpm = pow(a, exponent, n)p = math.gcd(m - a, n)if p &gt; 1 and n % p == 0:    q = n // p    phi = (p - 1) * (q - 1)    d = inverse(e, phi)    m = pow(c, d, n)    print(&quot;Flag:&quot;, long_to_bytes(m).decode())else:    # 如果a=2不成功，尝试其他a值    found = False    for a in range(3, 10):        m = pow(a, e * dp, n)        p = math.gcd(m - a, n)        if p &gt; 1 and n % p == 0:            q = n // p            phi = (p - 1) * (q - 1)            d = inverse(e, phi)            m = pow(c, d, n)            print(&quot;Flag:&quot;, long_to_bytes(m).decode())            found = True            break    if not found:        print(&quot;Failed to find p with a=2 to 9. Try another method.&quot;)</code></pre><p>运行就得flag：</p><ul><li><pre><code>SYC&#123;welcome_to_crypto&#125;<pre><code class="highlight plaintext">- 接下是重头戏：# 史上最没节操的游戏：首先为一个小型galgame,只是不过很是难蚌。![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_16-35-47.png)首先非常的容易，我们先打一个逆转裁判：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_17-09-56.png)在这里我们的名字会被更改，但不用慌，维吉尼亚来拯救你：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_17-08-56.png)这样就得到了我们想要的flag4：</code></pre>have_fun_</code></pre></li></ul><pre><code class="highlight plaintext">好接下在前往游乐场：做些流量分析题就行了：![](./FHACKER-%20CTF-%20WP.assets/flag1.png)就得到flag2：</code></pre><p>flag{welcome_to_</p><pre><code class="highlight plaintext">现在该去电影院了，去见贝利亚，是音频隐写，去除杂音，用sstv听一下：![](./FHACKER-%20CTF-%20WP.assets/%E9%9F%B3%E9%A2%91.png)得到网址：</code></pre><p><a href="https://www.cnblogs.com/handsomesnowsword">https://www.cnblogs.com/handsomesnowsword</a></p><pre><code class="highlight plaintext">能访问到出题人的博客：界面多刷新几次，我刷了两次就出来了：![](./FHACKER-%20CTF-%20WP.assets/flag2.png)得到flag2：</code></pre><p>RehPY_</p><pre><code class="highlight plaintext">现在我们走到了漫展，见到的无头学姐，需要我们来帮她来找头，是电子取证：找到网址：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_18-00-54.png)找到藏头诗：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_18-02-20.png)得到flag3：</code></pre><p>WHERE_YOU_CAN_</p><pre><code class="highlight plaintext">现在终于到了最终的步骤：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_17-59-48.png)使用社会工程学得到：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_18-03-24.png)班级为324，也就是flag5：</code></pre><p>324</p><pre><code class="highlight plaintext">最后拼得flag：</code></pre><p>flag{welcome_to_RehPY_WHERE_YOU_CAN_have_fun_324}</p><pre><code class="highlight plaintext">2.友谊地久天长发现是一个邮箱文件，很明显，我们使用任意的邮箱进行打开，会得到一张损坏的图片和友谊地久天长的音频在邮件中有提醒，不要再音频中太过倾注自己的感情：直接对图片进行检测：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_19-54-00.png)进行修复可得：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_19-52-06.png)用二维码检测得到密钥：</code></pre><p>Super_Snow_Sword_is_so_handsome</p><pre><code class="highlight plaintext">音频解密得到真得音频，然后直接formost直接提取文件得到：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_19-58-07.png)然后对图片用Stegsolve得到：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_20-02-40.png)然后对图片用：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_20-04-09.png)最后翻页可得：![](./FHACKER-%20CTF-%20WP.assets/Snipaste_2025-04-01_20-05-39.png)可得flag：</code></pre><p>flag{chutiren_is_very_handsome}</p><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2025/03/25/hello-world/"/>
      <url>/2025/03/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="highlight bash">$ hexo new <span class="string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="highlight bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="highlight bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="highlight bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
